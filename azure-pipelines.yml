# Runs after merge to main

trigger:
  - main

variables:
  - group: radius-angular
  - name: projectName
    value: $[variables.PROJECT_NAME]
  - name: feedName
    value: $[variables.FEED_NAME]
  - name: personalAccessToken
    value: $[variables.PERSONAL_ACCESS_TOKEN]
  - name: orgName
    value: $[variables.ORG_NAME]
  - name: GitHubToken
    value: $[variables.GH_TOKEN]
  - name: npm_config_cache
    value: $(Pipeline.Workspace)/.npm

jobs:
  - job: install
    pool:
      vmImage: ubuntu-latest
      steps:
        - checkout: self
          persistCredentials: true

        - task: NodeTool@0
          inputs:
            versionSpec: "14.x"
          displayName: "Install Node"

        - task: Cache@2
          displayName: "Cache npm packages"
          inputs:
            key: 'npm | "$(Agent.OS)" | package-lock.json'
            restoreKeys: |
              npm | "$(Agent.OS)"
            path: $(npm_config_cache)
        - script: |
            npm cache ls
            npm cache verify
          displayName: Show cache
  - job: build
    pool:
      vmImage: ubuntu-latest
      dependsOn: install
      steps:
        - script: npm ci --cache $(npm_config_cache)
          displayName: "cache exists; Node clean install"
          condition: ne(variables.CACHE_RESTORED, 'true')

        - script: npm run lint
          displayName: "Lint"

        - script: npm run test:ds --collect-coverage
          displayName: "Test"

        - task: CopyFiles@2
          displayName: "Copy npm package"
          inputs:
            sourceFolder: "$(Build.SourcesDirectory)"
            contents: "coverage/**"
            targetFolder: $(Build.ArtifactStagingDirectory)/coverage

        - script: npm run build:ds
          displayName: "Build design system package"

        - script: cd dist && npm pack
          displayName: "Package for npm release"

        - task: CopyFiles@2
          displayName: "Copy npm package"
          inputs:
            sourceFolder: "$(Build.SourcesDirectory)"
            contents: "*.tgz"
            targetFolder: $(Build.ArtifactStagingDirectory)/npm

        - task: CopyFiles@2
          displayName: "Copy package.json"
          inputs:
            sourceFolder: "$(Build.SourcesDirectory)"
            contents: "package.json"
            targetFolder: $(Build.ArtifactStagingDirectory)/npm

        - publish: "$(Build.ArtifactStagingDirectory)/npm"
          displayName: "Publish to Artifact Staging Dir"
          artifact: "*.tgz"
